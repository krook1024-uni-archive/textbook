<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Reverse engineering UML osztálydiagram</title>
        <para>
            Az UML osztálydiagrammok kezdetben tervezésre voltak szánva,
            viszont sok programozó workflow-ja ennek éppen a fordítottja,
            vagyis először programoznak, aztán dokumentálnak. Ennek
            következtében kialakult a szokás, hogy reverse engineering
            jelleggel készítünk UML osztálydiagrammokat, vagyis akkor, mikor
            már a forráskód készen van.
        </para>
        <para>
            Az UML specifikációja viszonylag nagy terjedelmű, viszont ezt nem
            is szükséges ismernünk. Az osztálydiagrammok jelölése a következő
            rendszere a következőképp néz ki: van egy három részre bontott
            téglalapunk, a legfelső részben az osztály neve van.  A következő
            részben a mezők, majd alattuk a metódusok találhatók. A publikus
            adattagok jelölője a <filename>+</filename>, a priváté a
            <filename>-</filename>, a protected láthatóságú adattagokat pedig a
            <filename>#</filename> azonosítja.
        </para>
        <para>
            Számos olyan eszköz van, amely képes forráskódból
            osztálydiagrammokat generálni, az előző felvonásban például az
            Umbrello nevű programot használtuk, azonban most valami mást fogunk
            kipróbálni, névszerint a <link
            xlink:href="http://perso.ensta-paristech.fr/~kielbasi/tikzuml/index.php?lang=en">
            TikZ-UML</link> csomagot a <link
            xlink:href="https://www.latex-project.org/"> LaTeX</link>
            leírónyelvben belül. Ez mind szabad szoftver.
        </para>
        <para>
            Az első védési programhoz, az <filename>LZWBinFá</filename>hoz
            tartozó osztálydigram itt látható.
        </para>
        <figure>
            <title>LZWBinFa UML osztálydiagramm TeX-ben</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="./pictures/uml.png" width="100%" />
				</imageobject>
			</mediaobject>
		</figure>
        <para>
            Véleményem szerint TeX-ben sokkal szebb diagrammok készíthetők,
            mint a generáló programokkal, ami nem véletlen, hiszen a TeX
            egy igen népszerű typesetting nyelv, ami jelen van a nyomdákban,
            de legfőbb tudományos publikációk során használatos.
        </para>
        <para>
            Az ábra forráskódja a következőképp nézz ki.
        </para>
        <programlisting language="tex">
            <textobject>
                <textdata fileref="./files/mandelb2/uml.tex" />
            </textobject>
        </programlisting>
        <para>
            Amint látjuk, a <filename>LaTeX</filename> szintaxisa egyáltalán
            nem nehéz, könnyen emészthető és könnyen írható, arról nem
            beszélve, hogy gyönyörű dokumentumokat kapunk, melynek minőségét
            semmilyen WYSIWYG szerkesztővel nem lehet megközelíteni.
        </para>
    </section>
    <section>
        <title>Forward engineering UML osztálydiagram</title>
        <para>
            Ebben a fejezetben megnézzük az UML eredeti rendeltetését,
            miszerint előre megtervezzük az osztályainkat és ebből
            generálunk forráskódot.
        </para>
        <para>
            Az ötlet a koncepció mögött az, hogy a programozó miután
            megtervezte az osztályokat, már csak a lényges részeket kell, hogy
            kitöltse, és nem kell időt vesztegetni az osztályok, változók,
            metódusok definíciójával.
        </para>
        <para>
            Ebben a példában az Eclipsere épülő Papyrus programot fogjuk
            használni az UML tervezéshez és kódgeneráláshoz. Az Eclipset
            telepíthetük Arch Linuxon például a
        </para>
        <screen>
            <![CDATA[$ pacman -S eclipse-common eclipse-cpp eclipse-java]]>
        </screen>
        <para>
            parancs kiadásával. Ezután telepítsük a Papyrust is az Eclipse
            IDE-n belül az utasítások alapján: <link
            xlink:href="https://www.eclipse.org/papyrus/">
            https://www.eclipse.org/papyrus/</link>.
        </para>
        <para>
            A tervezés elkezdéséhez kiváló walk-through leírás található a
            dokumentációban. Ez a következő linken érhető el: <link
            xlink:href="https://wiki.eclipse.org/Papyrus/Codegen/CppHelloWorld">
            https://wiki.eclipse.org/Papyrus/Codegen/CppHelloWorld</link>.
        </para>
        <para>
            Hogyha kattingatásssal létrehoztuk az osztálydiagrammokat,
            valami ilyesmit kellene, hogy kapjunk:
        </para>
        <figure>
            <title>FW engineering UML osztálydiagramm</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="./pictures/uml1.png" width="100%" />
                </imageobject>
            </mediaobject>
        </figure>
        <para>
            Ezután próbáljuk meg kibogáraszni a Eclipse eszköztárából
            a <emphasis role="strong">Generate code</emphasis> opciót,
            és indítsuk el. Ez létre fog hozni nekünk egy új C++
            projektet, ami megfelel annak, amit lerajzolgattunk.
        </para>
        <figure>
            <title>FW engineering C++ kód generálás</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="./pictures/uml2.png" width="100%" />
                </imageobject>
            </mediaobject>
        </figure>
        <figure>
            <title>FW engineering C++ kód generálás</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="./pictures/uml3.png" width="100%" />
                </imageobject>
            </mediaobject>
        </figure>
        <para>
            A generált kódot már futtathatjuk is, vagy fejleszthetjük
            akár tovább. Véleményem szerint az ilyen kattingatással csak
            drága időt veszünk el önmagunktól...
        </para>
    </section>
    <section>
        <title>Egy esettan</title>
        <para>
            BME C++ könyv 14. fejezetét (427-444 elmélet; 445-469 esettan)
            dolgozzuk fel!
        </para>
        <para>
            Az esettanulmány az UML tervezés előnyeit próbálja megmutatni.  A
            történet, hogy van egy cég, aki számítógépeket és alkatrészeket
            árul, és az ő számukra kell egy alkalmazást készíteni, ami
            nyilvántartja az alkatrészeket és a konfigurációkat.  Továbbá cél
            az is, hogy a jövőben minél egyszerűbben kiegészíthető koncepciót
            alkossunk.
        </para>
        <para>
            A megoldást esetünkben egy C++ könyvtár (library) segítségével
            oldották meg, hiszen így felhasználható anélkül is, hogy kiadnák a
            forráskódját.
        </para>
        <para>
            Ez a létrehozott keretrendszer képes kezelni elemi, vagy összetett
            termékeket, egyszerűen úgy, hogy a terméket reprezentáló osztályban
            van egy termékeket tároló vektor, ami tartalmazza az ő
            alkatrészeit, amik szintén a termék osztály példányai.
        </para>
        <para>
            Az osztályok UML osztálydiagrammjai szerint a következőképpen
            néz ki:
        </para>
        <figure>
            <title>C++ könyv esettan</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="./pictures/bmecpp.png" width="100%" />
                </imageobject>
            </mediaobject>
        </figure>
        <para>
            A program egyszerű felépítésű szövegfájlokból képes beolvasni
            adatokat, és ezeket reprezentálja ebben a bizonyos
            adatszerkezetben, amiről beszéltünk.
        </para>
    </section>
    <section>
        <title>BPMN</title>
        <para>
            Rajzoljunk le egy tevékenységet BPMN-ben!
        </para>
        <para>
            Ehhez a feladathoz kiváló segítséget nyújtott nekem a <link
            xlink:href="https://demo.bpmn.io/new">bpmn.io</link> webapplkáció.
        </para>
        <para>
            Az alábbi BPMN példa azt mutatja be, hogy mi történhet,
            amennyiben <emphasis>éhes vagyok</emphasis>.
        </para>
        <figure>
            <title>BPMN tevékenység</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="./pictures/bpmn.png" width="100%" />
                </imageobject>
            </mediaobject>
        </figure>
        <para>
            Az ábrát egyszerűen tudjuk értelmezni, de ehhez nyújtok némi
            segítséget;
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    A vékony körvonalú kör a <emphasis
                    role="strong">tevékenység kezdetét</emphasis> jelöli.
                </para>
            </listitem>
            <listitem>
                <para>
                    A téglalapra hasonlító síkidomok a <emphasis
                    role="strong">feladatok</emphasis>at jelölik.
                </para>
            </listitem>
            <listitem>
                <para>
                    A rombuszba zárt kör egy úgynevezett <emphasis
                    role="strong">kapu</emphasis>. Ez a változat megfelel a
                    <emphasis role="strong">megengedő vagy</emphasis>nak, míg a
                    rombuszba zárt X a kizáró vagy megfelelője.
                </para>
            </listitem>
            <listitem>
                <para>
                   A vastag körvönalú kör a <emphasis
                   role="strong">tevékenység</emphasis> vége.
                </para>
            </listitem>
        </itemizedlist>
    </section>
    <section>
        <title>TeX UML</title>
        <note>
            <title>Összevont feladat</title>
            <para>
                Ezt a feladatot összevontam a csokor első feladatával.
            </para>
        </note>
        <para>
            LaTeX-ben például a <filename>tikz-uml</filename> csomaggal
            készíthetünk UML diagrammokat, erről rögtön a csokor első
            feladatában látható is egy példa.
        </para>
    </section>
</chapter>

