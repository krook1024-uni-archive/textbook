<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Schwarzenegger!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Szoftmax Py MNIST</title>
        <para>
            <emphasis role="strong">Megoldás forrása:</emphasis>
            <link xlink:href="https://progpater.blog.hu/2016/11/13/hello_samu_a_tensorflow-bol">
                https://progpater.blog.hu/2016/11/13/hello_samu_a_tensorflow-bol
            </link>
        </para>
        <para>
            A TensorFlow egy nyílt forráskódú szabad szoftver, amit a Google is használ, illetve
            fejleszt. A TensorFlow-val bárki egyszerűen végezhet mesterséges intelligenciához
            kapcsolódó kísérleteket, kutatásokat.
        </para>
        <para>
            Most mi is pár ilyet nézünk meg. A fejezet olvasása előtt nézzük meg és familiarizáljuk
            magunkat a Bazel Build (<link xlink:href="https://bazel.build/">https://bazel.build/</link>)
            rendszerrel, mely kelleni fog nekünk a C++-os TensorFlow
            projektek fordításához.
        </para>
        <para>
            Az első program amit megtekintünk Pythonban nem csinál mást, csak
            összeszoroz két számot neurális hálók segítségével. Ezt úgy képzeljük
            el, mint C-ben a hello worldöt, tehát a legegyszerűbb programot, amit
            el tudunk készíteni. Lássuk is a programot!
        </para>
		<note>
			<title>Módosított kódcsipet</title>
			<para>
                A következő kódcsipetet Bátfai készítette és én módosítottam (deprecated
                szintaktikai korszerűsítése)!
			</para>
		</note>
        <programlisting language="python">
            <textobject>
                <textdata fileref="./files/svajci/twicetwo/twicetwo.py" />
            </textobject>
        </programlisting>
        <para>
            A számítási ábra ehhez a következőképp néz ki:
        </para>
        <figure>
            <title>2*2 számítási ábra</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="./pictures/twicetwo.png" />
                </imageobject>
            </mediaobject>
        </figure>
        <para>
            Az <emphasis role="strong">MNIST</emphasis> egy kézírásfelismerő adatbázis, mely számok kézzel írt változatát képes felismerni.
        </para>
        <figure>
            <title>Példák az MNIST adatbázisból</title>
             <mediaobject>
                <imageobject>
                    <imagedata fileref="./pictures/MnistExamples.png" />
                </imageobject>
            </mediaobject>
        </figure>
        <para>
            A kódot ehhez átvesszük a TensorFlow weboldaláról, íme:
            <link xlink:href="https://www.tensorflow.org/tutorials">https://www.tensorflow.org/tutorials</link>.
        </para>
		<note>
			<title>Átvett kódcsipet</title>
			<para>
                A következő kódcsipetet átvettem a tensorflow.org/tutorials oldalról!
			</para>
		</note>
        <programlisting language="python">
<![CDATA[
import tensorflow as tf
mnist = tf.keras.datasets.mnist
(x_train, y_train),(x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0
model = tf.keras.models.Sequential([
  tf.keras.layers.Flatten(input_shape=(28, 28)),
  tf.keras.layers.Dense(512, activation=tf.nn.relu),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(10, activation=tf.nn.softmax)
])
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
model.fit(x_train, y_train, epochs=5)
model.evaluate(x_test, y_test)
]]>
        </programlisting>
        <para>
            A programot futtatva a következőket látjuk:
        </para>
        <screen>
<![CDATA[$ ./mnist.py
Epoch 1/5
60000/60000 [==============================] - 13s 224us/sample - loss: 0.2188 - acc: 0.9359
Epoch 2/5
60000/60000 [==============================] - 13s 224us/sample - loss: 0.0956 - acc: 0.9702
Epoch 3/5
60000/60000 [==============================] - 14s 226us/sample - loss: 0.0678 - acc: 0.9783
Epoch 4/5
60000/60000 [==============================] - 13s 224us/sample - loss: 0.0536 - acc: 0.9829
Epoch 5/5
60000/60000 [==============================] - 13s 224us/sample - loss: 0.0457 - acc: 0.9853
10000/10000 [==============================] - 1s 74us/sample - loss: 0.0685 - acc: 0.9804]]>
        </screen>
        <para>
            Ezzel, mint láthatjuk, egy körülbelül 98 százalékos pontosággal
            rendelkező hálózatot sikerült megtanítanunk.
        </para>
    </section>
<!--
    <section>
        <title>Szoftmax R MNIST</title>
        <para>
            R
        </para>
        <para>
            Ebben a példában ugyanazt a kézírásfelismerést nézzük majd meg, mint a Pythonos példában,
            azonban még ehhez szükségem lesz némi plussz jártasságra az R nyelvben.
        </para>
    </section>
-->
    <section>
        <title>Mély MNIST</title>
        <warning>
            <title>Passzolt feladat</title>
            <para>
                Ezt a feladatot a SMNIST-es kutatáshoz való hozzájárulásomra hivatkozva
                passzoltam.
            </para>
            <para>
                Komment linkje: <link xlink:href="https://www.facebook.com/groups/udprog/permalink/1075942815926940/?comment_id=1080205895500632">
                    https://www.facebook.com/groups/udprog/permalink/1075942815926940/?comment_id=1080205895500632
                </link>
            </para>
        </warning>
    </section>
    <section>
        <title>Deep dream</title>
        <para>
            Megoldás forrása:
            <link xlink:href="https://github.com/keras-team/keras/blob/master/examples/deep_dream.py">https://github.com/keras-team/keras/blob/master/examples/deep_dream.py</link>
        </para>
        <para>
            A Keras deep dreamben mindenféle kábítószer használata nélkül tekintehetünk meg olyan példákat,
            mint egy LSD trippen. A látvány egyszerre hátborzongató és különleges.
        </para>
        <para>
            Ebben a fejezetben kitérnék a Python fejlesztés egyik kulcselemére, a virtuális
            környezeketre (<emphasis>virutalenv, venv</emphasis>). A virtuális környezetek előnye,
            hogy egy-egy program dependenciáit (könyvtárak, stb) nem kell globális, a root
            felhasználóval telepítenünk, elég azt egy virtuális környezetben telepíteni, a projekt
            mappáján belül. A legjobb az, hogy ezeket a letöltött dependenciákat nem kell
            a verziókezelőnkkel kezeltetni, elég ha berakjuk őket célszerűen
            egy <filename>requirements.txt</filename> fájlba, és bárki aki fejleszteni akarja a
            projektünket, vagy dolgozni rajta, telepítheti, anélkül hogy rendszergazdai
            jogosultságai lennének az adott gépen. Egy-egy könyvtár verziószámát is megadhatjuk,
            akár a minimálist, akár a maximálist abból.
        </para>
        <para>
            Itt látható néhány deep dreammel generált kép. Forrás:
            <link xlink:href="https://www.google.hu/search?q=deepdream">https://www.google.hu/search?q=deepdream</link>.
        </para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="./pictures/deepdream/1.jpg" width="48%"/>
            </imageobject>
        </mediaobject>
        <mediaobject>
            <imageobject>
                <imagedata fileref="./pictures/deepdream/2.jpeg" width="48%"/>
            </imageobject>
        </mediaobject>
        <mediaobject>
            <imageobject>
                <imagedata fileref="./pictures/deepdream/3.jpeg" width="48%" />
            </imageobject>
        </mediaobject>
        <para>
            Ha ezek a képek elynerték a tetszésünket, próbáljuk ki a deep dreamet mi magunk is,
            hiszen csinálhatunk ilyet a kedvenc képeinkből is.
        </para>
        <screen>
<![CDATA[
$ virtualenv -p /usr/bin/python3 venv # Készítsük el a virtuális környezetet
Running virtualenv with interpreter /usr/bin/python3
Using base prefix '/usr'
New python executable in /home/b1/Repos/textbook/files/svajci/deepd/venv/bin/python3
Also creating executable in /home/b1/Repos/textbook/files/svajci/deepd/venv/bin/python
Installing setuptools, pip, wheel...
done
$ source venv/bin/activate # Aktiváljuk a virtuális környezetet
(venv) $ pip3 install tensorflow keras pillow # Telepítsük a Keras-t
[...]
(venv) $ pip3 freeze > requirements.txt # Mentsük el a dependenciákat
[...]
]]>
        </screen>
        <para>
            Immáron használhatjuk is a deepdreamet, feltéve, hogy minden úgy ment,
            ahogy mennie kell. Próbáljuk ki saját képekkel! Alább látható néhány
            az én próbálkozásaimból. A programkódot olvasva láthatjuk, hogy a beállítások
            tweakelhetők.
        </para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="./files/svajci/deepd/results/1.png" width="48%" />
            </imageobject>
        </mediaobject>
        <mediaobject>
            <imageobject>
                <imagedata fileref="./files/svajci/deepd/results/2.png" width="48%" />
            </imageobject>
        </mediaobject>
        <mediaobject>
            <imageobject>
                <imagedata fileref="./files/svajci/deepd/results/3.png" width="48%" />
            </imageobject>
        </mediaobject>
    </section>
    <section>
        <title>Minecraft-MALMÖ</title>
        <para>
            A Minecraft-MALMÖ egy programozható ágens kiegészítő a Minecraft játékhoz.
            A projekt GitHub oldala a következő címen érhető el:
            <link xlink:href="https://github.com/Microsoft/malmo">https://github.com/Microsoft/malmo</link>.
            Ezen a címen találunk példaprogramokat is, valamint remek dokumentációt.
        </para>
        <para>
            A Malmö telepítéséhez végezzük el a repóban javasoltakat, mely némi időt
            igényelhet, hiszen a dependenciák közé tartozik a Boost C++ könyvtár,
            és ennek Python interfésze. Ha megadatik az az áldás, hogy Ubuntu 16.04
            vagy 18.04-et futtatunk, úgy használjuk a repón belül a
            <filename>scripts/build.sh</filename> szkriptet, mely elvégzi helyettünk
            a piszkos munkát.
        </para>
        <para>
            A Malmö előnye, hogy a Minecraftot nem kell megvegyük, hiszen tartalmaz egy
            bináris változatot, amit bárki használhat, akinek feltett szándéka, hogy
            ágenst programozzon Malmöben.
        </para>
    </section>
</chapter>
