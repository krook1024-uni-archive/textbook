<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Lauda!</title>
    </info>
    <section>
        <title>Port scan</title>
        <para>
            Mutassunk rá ebben a port szkennelő forrásban a kivételkezelés
            szerepére!
        </para>
        <para>
            <link
                xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html#id527287">
                https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html#id527287
            </link>
        </para>
        <para>
            A program forrása elég rövid, ezért be is húzom ide, hogy jobban
            lássuk, amiről beszélgetünk.
        </para>
        <programlisting language="java">
<![CDATA[ public class PortScan {

    public static void main(String[] args) {

        for(int i=0; i<1024; ++i)

            try {

                java.net.Socket socket = new java.net.Socket(args[0], i);

                System.out.println(i + " figyeli");

                socket.close();

            } catch (Exception e) {

                System.out.println(i + " nem figyeli");

            }
    }

}]]>
        </programlisting>
        <para>
            Portszkennelést páldul akkor használunk, mikor szeretnénk
            meggyőződni arról, hogy egy általunk üzemeltetett szerver nem fed
            fel túl sokat (tehát nem rendelkezik feleslegesen nyitva levő
            portokkal).
        </para>
        <para>
            Ezen program működési elve, hogy 0-tól 1024-ig végigmegy az összes
            porton, és megpróbál egy socketet nyitni a <code
                language="java">java.net.Socket</code> osztály segítségével.
            Amennyiben elolvassuk az ehhez az osztályhoz tartozó
            <link xlink:href="https://docs.oracle.com/javase/7/docs/api/java/net/Socket.html">dokumentációt,</link>
            azt láthatjuk, hogy amennyiben nem tudunk csatlakozni, úgy <code
            language="java">SecurityException</code> hibát fog dobni a meghívás.
        </para>
        <para>
            Ennek köszönhetően egyszerűen, amennyiben nem tudunk socketet nyitni
            az adott porton, tudjuk, hogy nem elérhető.
        </para>
        <para>
            Példa kimenet alább látható (0-65535):
        </para>
        <screen>
<![CDATA[
$ java PortScan unideb.hu | grep -v nem
22 figyeli
25 figyeli
80 figyeli
111 figyeli
113 figyeli
443 figyeli
2017 figyeli
5666 figyeli
]]>
        </screen>
    </section>
    <section>
        <title>AOP</title>
        <para>
            Szőj bele egy átszövő vonatkozást az első védési programod Java
            átiratába!
        </para>
    </section>
    <section>
        <title>Android Játék</title>
        <para>
            Írjunk egy egyszerű Androidos "játékot"! Építkezzünk például a 2.
            hét "Helló, Android!" feladatára!
        </para>
    </section>
    <section>
        <title>Junit teszt</title>
        <para>
            A
            <link xlink:href="https://progpater.blog.hu/2011/03/05/labormeres_otthon_avagy_hogyan_dolgozok_fel_egy_pedat">
                https://progpater.blog.hu/2011/03/05/labormeres_otthon_avagy_hogyan_dolgozok_fel_egy_pedat
            </link>
            poszt kézzel számított mélységét és szórását dolgozd be egy Junit
            tesztbe.
        </para>
    </section>
    <section>
        <title>OSCI</title>
        <para>
            Készíts egyszerű C++/OpenGL-es megjelenítőt, amiben egy kocsit
            irányítasz az úton.
        </para>
    </section>
</chapter>
