<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Lauda!</title>
    </info>
    <section>
        <title>Port scan</title>
        <para>
            Mutassunk rá ebben a port szkennelő forrásban a kivételkezelés
            szerepére!
        </para>
        <para>
            <link
                xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html#id527287">
                https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html#id527287
            </link>
        </para>
        <para>
            A program forrása elég rövid, ezért be is húzom ide, hogy jobban
            lássuk, amiről beszélgetünk.
        </para>
        <programlisting language="java">
<![CDATA[ public class PortScan {

    public static void main(String[] args) {

        for(int i=0; i<1024; ++i)

            try {

                java.net.Socket socket = new java.net.Socket(args[0], i);

                System.out.println(i + " figyeli");

                socket.close();

            } catch (Exception e) {

                System.out.println(i + " nem figyeli");

            }
    }

}]]>
        </programlisting>
        <para>
            Portszkennelést páldul akkor használunk, mikor szeretnénk
            meggyőződni arról, hogy egy általunk üzemeltetett szerver nem fed
            fel túl sokat (tehát nem rendelkezik feleslegesen nyitva levő
            portokkal).
        </para>
        <para>
            Ezen program működési elve, hogy 0-tól 1024-ig végigmegy az összes
            porton, és megpróbál egy socketet nyitni a <code
                language="java">java.net.Socket</code> osztály segítségével.
            Amennyiben elolvassuk az ehhez az osztályhoz tartozó
            <link xlink:href="https://docs.oracle.com/javase/7/docs/api/java/net/Socket.html">dokumentációt,</link>
            azt láthatjuk, hogy amennyiben nem tudunk csatlakozni, úgy <code
            language="java">SecurityException</code> hibát fog dobni a meghívás.
        </para>
        <para>
            Ennek köszönhetően egyszerűen, amennyiben nem tudunk socketet nyitni
            az adott porton, tudjuk, hogy nem elérhető.
        </para>
        <para>
            Példa kimenet alább látható (0-65535):
        </para>
        <screen>
<![CDATA[
$ java PortScan unideb.hu | grep -v nem
22 figyeli
25 figyeli
80 figyeli
111 figyeli
113 figyeli
443 figyeli
2017 figyeli
5666 figyeli
]]>
        </screen>
    </section>
    <section>
        <title>AOP</title>
        <para>
            Szőj bele egy átszövő vonatkozást az első védési programod Java
            átiratába!
        </para>
        <para>
            Az aspektus orientált programozást (AOP) egy olyan szemlélet, amely
            lehetőséget ad számunkra egy bizonyos kód módosítására, anélkül,
            hogy a kódot módosítanánk. Lehetőségünk van például megadni
            kódcsipeteket egy külön fájlban, amiknek megmondhatjuk, hogy
            fussanak le az után, vagy előtt, amikor a programban például lefut
            egy metódus.
        </para>
        <para>
            Számomra az egész élmény kicsit szürreális volt, olyan, mintha ezzel
            az ötlettel nem programozók, hanem filozófusok hozakodtak volna elő.
            Minél többet használjuk, annál inkább nemdeterminisztikusabbá
            tesszük a programunkat, az undefined behaviour pedig sosem olyan
            dolog, amit szeretnénk...
        </para>
        <para>
            Az AOP felhasználását illetően azt találtam, hogy akkor
            használhatjuk az ilyesfajta programozást, amikor régi kódhoz
            kényszerülünk nyúlni, de "bántani" mégsem szeretnénk azt, hiszen ki
            tudja mi történhet.
        </para>
        <para>
            Az AspectJ az AOP szemlélet Java-s kivetülése. Ezt a legtöbb
            GNU/Linux disztribúción telepíthetjük a favorizált
            csomagkezelőnkkel. Ubuntu alatt:
        </para>
        <screen>
            <![CDATA[$ apt install aspectj]]>
        </screen>
        <para>
            Ezután a fordítás meglehetősen hasonló rendes Java kód fordításához,
            annyi különbséggel, hogy a java fordító helyett az ajc fordítót
            használjuk.
        </para>
        <para>
            Hogy az egyszerűséget megőrizzük, az első védési program lebutított
            verzióját fogjuk felhasználni állatorvosi lóként.
        </para>
        <para>
            Tegyük fel, hogy szeretnénk megszámlálni az egyesek és nullások
            számát a fában, viszont nem vagyunk elég képzettek ahhoz, hogy magát
            az <classname>LZWBinFa</classname> osztályt módosítsuk. Segítsünkre
            siet az AspectJ, ahol úgynevezett pointcut-ok segítségével
            megmondhatjuk, hogy mi történjen egy bizonyos metódus lefutása
            előtt/után.
        </para>
        <para>
            Tekintsük a következő Aspect-et:
        </para>
        <programlisting language="java">
<![CDATA[package com.krook1024;

public aspect Aspect {
    private int ones = 0, zeros = 0;

    // Az addbit() pointcut -- hogy tudjuk számolni a bemenő adatokat
    pointcut addbit(): execution(public void addBit(char));

    before(char b): addbit() && args(b) {
        if ('1' == b)
            ++ones;
        else if ('0' == b)
            ++zeros;
    }


    // A main() függvény pointcut -- hogy ki tudjuk írni a lefutás után az eredményt
    pointcut main(): execution(public static void main(String[]));

    after(): main() {
        System.out.println("ones = " + ones);
        System.out.println("zeros = " + zeros);
    }
}]]>
        </programlisting>
        <para>
            Ezzel a két pointcuttal már el is értük, amit annyira szerettünk
            volna: a megszámoltuk a fába bepakolt egyeseket és nullásokat.
        </para>
        <figure>
            <title>AspectJ működés közben</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="./pictures/aspectj.png" width="100%" />
                </imageobject>
            </mediaobject>
        </figure>
        <screen>
<![CDATA[in = 01111001001001000111
melyseg = 4
atlag = 2.75
szoras = 0.9574271077563381
ones = 10
zeros = 10]]>
        </screen>
    </section>
    <section>
        <title>Android Játék</title>
        <para>
            Írjunk egy egyszerű Androidos "játékot"! Építkezzünk például a 2.
            hét "Helló, Android!" feladatára!
        </para>
        <para>
            Ebben a feladatban egy egyszerű Snake játékot fogunk elkészíteni. A
            Snake játék lényege, hogy egy kígyót irányítunk, a képernyőn pedig
            véletlenszerűen jelenik meg egy alma, amit ha a kígyó megesz, akkor
            eggyel nő a hossza. A cél tehát, hogy minél hosszabb legyen a
            kígyónk. A kígyó meghal, ha saját magába ütközik (megenné magát),
            vagy ha a falba ütközik.
        </para>
        <para>
            Az írányítást úgy gondoltam, hogy a képernyő megfelelő széleire
            kattintva lehet a kígyó irányát megváltoztatni.
        </para>
        <note>
            <title>Felhasznált tartalom</title>
            <para>
                A feladat elvégzése során segítségemre volt a következő
                blogcikk:
                <link
                    xlink:href="http://gamecodeschool.com/android/coding-a-snake-game-for-android/#">
                    http://gamecodeschool.com/android/coding-a-snake-game-for-android
                </link>.
            </para>
        </note>
        <para>
            Az első lépés természetesen, hogy létrehozunk egy Android Studio
            projektet, kézileg menedzselni a fordítórendszert és társait
            borzasztóan időigényes lenne, arról nem is beszélve, hogy az Android
            Studio nagyon sok kényelmi funkciót szolgáltat. Kiváló választást
            végeztek a Google-nél, mikor úgy döntöttek, hogy az Android Studio-t
            az IntellIJ IDEA alapjaira építik.
        </para>
        <para>
            Az IntelliJ IDEA Ultimade edition változatával (diákoknak az egész
            termékcsalád ingyenes) lehetőségem volt egy UML osztálydiagrammot
            legenerálni, ez talán segíti a magyarázást:
        </para>
        <figure>
            <title>Snake UML diagram</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="./pictures/snake.png" width="40%" />
                </imageobject>
            </mediaobject>
        </figure>
        <para>
            Ha létrehoztuk az osztályt, létre kell hozni egy úgynevezett
            Activity-t, amit a telefonunk futtatni képes. Egy-egy ilyen Activity
            egy-egy képernyőnek felel meg. Gondoljunk például az androidus
            telefonunk beállítások menüjére, ami maga egy Activity, és az összes
            megnyitható opció saját Activity-t jelent.
        </para>
        <para>
            Nekünk egyetlen darab Activity létrehozására lesz szükségünk, ez
            fogja működtetni a programot. Az Activity a következőképp néz ki:
        </para>
        <programlisting language="java">
<![CDATA[public class MainActivity {
    SnakeEngine snakeEngine;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // Felbontás
        Display display = getWindowManager().getDefaultDisplay();

        Point size = new Point();
        display.getSize(size);

        snakeEngine = new SnakeEngine(this, size);

        setContentView(snakeEngine);
    }

    @Override
    protected void onResume() {
        super.onResume();
        snakeEngine.resume();
    }

    @Override
    protected void onPause() {
        super.onPause();
        snakeEngine.pause();
    }
}]]>
        </programlisting>
        <para>
            Amint látható, mindössze annyi történik, hogy megadjuk hogy alapvető
            események hatására mi történjen. Az
            <methodname>onCreate()</methodname> akkor fut le, amikor a
            felhasználó elindítja az alkalmazást. Nem is véletlen, hogy ekkor
            inicializáljuk a <varname>snakeEngine</varname> objektumot a
            megfelelő paraméterekkel (a "kontextus", valamint a méret). Ezen
            kívül az <methodname>onResume(), onPause()</methodname> metódusok
            akkor futnak le, amikor a felhasználó szünetelteti az alkalmazást
            (pl. ha kilép a telefon főképernyőjére).
        </para>
        <para>
            A kód érdekes része maga a <varname>SnakeEngine</varname> osztály.
            Ez jóval hosszabb, szóval csak a lényeges részeket fogom beágyazni.
        </para>
        <para>
            A <varname>SnakeEngine</varname> osztályt a
            <varname>SurfaceView</varname> osztályból származtatjuk, ami úgymond
            a nyelv része, ezt az Android operációs rendszer szolgáltatja. A
            dokumentáció ehhez itt található meg:
            <link xlink:href="https://developer.android.com/reference/android/view/SurfaceView">
                https://developer.android.com/reference/android/view/SurfaceView
            </link>.
        </para>
        <para>
            Minden játék tartalmaz egy fő loopot, nincs ez másképp a mi
            esetünkben sem. A fő szálat a mi esetünkben a következő kód alkotja:
        </para>
        <programlisting language="java">
<![CDATA[@Override
    public void run() {
        while (isPlaying) {
            if (updateRequired()) {
                update();
                draw();
            }
        }
    }]]>
        </programlisting>
        <para>
            Ez a rész biztosítja, hogy amíg a felhasználó az alkalmazásban van,
            folymatosan kapja a frissítéseket, ha pedig nincs, akkor ne
            használjunk feleslegesen erőforrásokat. Az
            <varname>isPlaying</varname> bool változó mondja meg, hogy éppen
            játszik-e a felhasználó. Emlékszünk a
            <methodname>onResume(), onPause()</methodname> metódusokra? Pontosan
            ezek állítják be az isPlaying változó értékét.
        </para>
        <para>
            Az <methodname>update()</methodname> metódusban a következő
            történik: megnézzük, hogy éppen találtunk-e egy almát, ha igen,
            akkor megesszük, vagy ha esetleg meghalna a kígyónk (falnak
            ütközött, vagy megette magát), akkor újraindítjuk a játékot.
        </para>
        <programlisting language="java">
<![CDATA[public void update() {
        // Found apple?
        if (snakeXs[0] == appleX && snakeYs[0] == appleY) {
            eatApple();
        }

        moveSnake();

        if (detectDeath())
            newGame();
    }]]>
        </programlisting>
        <para>
            Egy másik kulcsfontosságú metódus a <methodname>draw()</methodname>
            metódus.
        </para>
        <programlisting language="java">
<![CDATA[ public void draw() {
        if (surfaceHolder.getSurface().isValid()) {
            canvas = surfaceHolder.lockCanvas();

            // Background: Nord
            canvas.drawColor(Color.argb(255, 56, 66, 82));

            // Snake's color: Nord #A3BE8C
            paint.setColor(Color.argb(255, 163, 190, 140));

            // Font size
            paint.setTextSize(90);
            canvas.drawText("Score: " + score, 10, 70, paint);

            // Draw the snake block-by-block
            for (int i = 0; i < snakeLength; ++i) {
                canvas.drawRect(snakeXs[i] * blockSize,
                        (snakeYs[i] * blockSize),
                        (snakeXs[i] * blockSize) + blockSize,
                        (snakeYs[i] * blockSize) + blockSize,
                        paint);
            }

            // Apple color: Nord red
            paint.setColor(Color.argb(255, 191, 97, 106));

            // Draw apple
            canvas.drawRect(appleX * blockSize,
                    (appleY * blockSize),
                    (appleX * blockSize) + blockSize,
                    (appleY * blockSize) + blockSize,
                    paint);

            // Unlock canvas
            surfaceHolder.unlockCanvasAndPost(canvas);

        }
    } ]]>
        </programlisting>
        <para>
            Ami itt történik, az maga a képernyőre rajzolás. Ehhez úgynevezett
            festéket és vásznat használunk (paint és canvas). A
            <classname>Canvas</classname> osztály
            <methodname>drawText()</methodname> metódusával tudunk egyszerűen
            szöveget írni a képernyőre, a <methodname>drawRect()</methodname>
            metódus pedig, ahogyan a neve is takarja, négyszögeket képes
            rajzolni.
        </para>
        <para>
            A felhasználói bemenet feldolgozását az
            <methodname>onTouchEvent()</methodname> metódusban végezzük el.
            Ahogyan a feladat elején is tárgyaltuk, az irányítás egyszerű: a
            képernyő megfelelő szegmensében kell tapicskolnunk ahhoz, hogy az
            irányt megváltoztassuk.
        </para>
        <programlisting language="java">
<![CDATA[@Override
    public boolean onTouchEvent(MotionEvent motionEvent) {
        if ((motionEvent.getAction() & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_UP) {
            double x = motionEvent.getX();
            double y = motionEvent.getY();

            if (heading == Heading.UP || heading == Heading.DOWN) {
                if (x >= screenX / 2)
                    heading = Heading.RIGHT;
                else
                    heading = Heading.LEFT;
            } else {
                if (y <= screenY / 2)
                    heading = Heading.UP;
                else
                    heading = Heading.DOWN;
            }

        }

        return true;
    } ]]>
        </programlisting>
        <para>
            A végeredmény a következőképp néz ki:
        </para>
        <figure>
            <title>Snake</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="./pictures/snakegame.png" width="80%" />
                </imageobject>
            </mediaobject>
        </figure>
    </section>
    <section>
        <title>Junit teszt</title>
        <para>
            A
            <link xlink:href="https://progpater.blog.hu/2011/03/05/labormeres_otthon_avagy_hogyan_dolgozok_fel_egy_pedat">
                https://progpater.blog.hu/2011/03/05/labormeres_otthon_avagy_hogyan_dolgozok_fel_egy_pedat
            </link>
            poszt kézzel számított mélységét és szórását dolgozd be egy Junit
            tesztbe.
        </para>
        <para>
            Az úgynevezett unit tesztek lényege, hogy a kódok automatikusan
            tesztelhetőek legyenek. Ahelyett, hogy rengeteg időt töltenénk
            minden egyes verzió kézi tesztelésével, úgynevezett unit teszteket
            hozunk létre, amik például minden egyes commit után (ha használunk
            verziókövetőt, ami még az unit teszteknél is fontosabb) letesztelik
            az aktuális kódot előre megadott módon.
        </para>
        <para>
            Élő példát ilyen tesztekre találhatunk a vadonban, például ha
            megnézzük a Firefox Treeherder oldalát:
			<link xlink:href="https://treeherder.mozilla.org/#/jobs?repo=autoland">
				https://treeherder.mozilla.org/#/jobs?repo=autoland
			</link>.
        </para>
        <para>
            Természetesen ezek a tesztek nem helyettesítik teljesen a szoftver
            kézi tesztelését, csupán lerövidítik, kiegészítik azt. Megnézhetjük
            például a Firefox stratégiáját a következő oldalon:
            <link xlink:href="https://developer.mozilla.org/en-US/docs/Mozilla/QA/Automated_testing">
                https://developer.mozilla.org/en-US/docs/Mozilla/QA/Automated_testing
            </link>
        </para>
        <figure>
            <title>Firefox automatizált tesztelés</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="./pictures/firefoxtest.png" width="100%" />
                </imageobject>
            </mediaobject>
        </figure>
        <para>
            Láthatjuk, hogy a célja ezeknek a teszteknek a <emphasis
                role="strong">gyakori hibák</emphasis> kiszűrése.
        </para>
        <para>
            A JUnit a Java programnyelvhez létrehozott unit tesztelési megoldás.
            A használata egyszerű: létrehozunk egy új osztályt, ahol
            beimportáljuk a tesztelni kívánt kód osztályait, majd egy előre
            meghatározott szintaxissal megadjuk, hogy tesztelésnél milyen
            eredményeket várunk. Tekintsük a következő példát a JUnit
            leírásából:
            <link xlink:href="https://junit.org/junit5/docs/current/user-guide/#writing-tests">
                https://junit.org/junit5/docs/current/user-guide/#writing-tests
            </link>.
        </para>
        <programlisting language="java">
<![CDATA[import static org.junit.jupiter.api.Assertions.assertEquals;

import example.util.Calculator;

import org.junit.jupiter.api.Test;

class MyFirstJUnitJupiterTests {

    private final Calculator calculator = new Calculator();

    @Test
    void addition() {
        assertEquals(2, calculator.add(1, 1));
    } ]]>
        </programlisting>
        <para>
            Látjuk, hogy importálásra kerül a
            <classname>Calculator</classname>osztály, és az
            <function>addition()</function> metódusban történik maga az
            összeshasonlítás, hogy vajon ha a <varname>calculator</varname>
            objektum (ami a Calculator osztály egy példánya)
            <methodname>add()</methodname> metódusát hívjuk 1-re és 1-re,
            akkor valóban kettőt kapunk-e.
        </para>
        <para>
            A hosszas bevező után térjünk az igazi feladatra: készítsünk saját
            JUnit tesztet. Ehhez az első lépés, hogy a blogposztban szereplő
            kódot átírjuk C-ről Java-ra, viszont ezt már megtettük a 12.2-es
            fejezetben, az a változat már képes volt mélységet és szórást
            számolni. Ennek a lebutított változatát fogjuk használni a feladat
            során, hiszen ez bőven elég arra a célra, amire használni fogjuk.
            Lássuk is ezt a verziót:
        </para>
        <programlisting language="java">
            <textobject>
                <textdata fileref="./files/lauda/junit/LZWBinFa.java" />
            </textobject>
        </programlisting>
        <para>
            Erre a kimenet a következő:
        </para>
        <screen>
<![CDATA[in = 01111001001001000111
melyseg = 4
atlag = 2.75
szoras = 0.9574271077563381]]>
        </screen>
        <para>
            Ez megfelel a kézzel számoltaknak, viszont ez az unalmas, kézi
            tesztelés. Ahhoz, hogy ezt soha ne kelljen többet manuálisan, kézzel
            megnézni, készítsük el a JUnit tesztünket, amihez az IntelliJ IDEA
            nagyon jó segítséget nyújt. Szimplán navigáljunk az osztály
            definíciójához, majd nyomjuk meg az Alt+Enter billentyűkombinációt.
            Ezután válasszuk a "Create tests" menüpontot, és bejön egy felület,
            ami le is generálja nekünk a szükséges teszt osztályt.
        </para>
        <figure>
            <title>JUNit teszt generálás (IntelliJ IDEA)</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="./pictures/testgen.png" width="40%" />
                </imageobject>
            </mediaobject>
        </figure>
        <para>
            Ezt az osztályt minimálisan kellett kiegészítenem ahhoz, hogy működő
            tesztet kapjak. Az eredmény mind a három tesztre pozitív, tehát a
            programunk jól működött, íme:
        </para>
        <programlisting language="java">
            <textobject>
                <textdata fileref="./files/lauda/junit/LZWBinFaTest.java" />
            </textobject>
        </programlisting>
        <figure>
            <title>JUnit teszt lefut</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="./pictures/testOK.png" width="100%" />
                </imageobject>
            </mediaobject>
        </figure>
    </section>
    <section>
        <title>OSCI</title>
        <para>
            Készíts egyszerű C++/OpenGL-es megjelenítőt, amiben egy kocsit
            irányítasz az úton.
        </para>
    </section>
</chapter>
