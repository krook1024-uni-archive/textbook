<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Welch!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
		<title>Első osztályom</title>
        <para>
			<emphasis role="strong">Megoldás forrása:</emphasis>
		</para>
		<programlisting language="Java">
			<textobject>
				<textdata fileref="./files/welch/polargen/polargen.java" />
			</textobject>
		</programlisting>
		<para>
			A módosított polártranszformációs generátor argumentum két
			véletlenszerű érték generálása alkalmazható.
			Próbáljuk is ki!
		</para>
		<screen>
<![CDATA[$ /java/bin/java polargen.java
-0.7353431820414118
-0.33784190028284766
0.7750031835316805
0.5524713543467192
-0.5380423283211784
1.512849268596637
2.7148874695500966
-0.23688836801277952
-0.3238588036816322
-0.7963150809415576
$ /java/bin/java polargen.java
-0.6566325405553158
0.40465899229436114
0.08634239512228409
-0.9470321445590416
0.1926238606249351
0.7705517022243931
0.9084531239664848
-1.4472688950554047
-1.6250659297425345
-0.7791586500972545]]>
		</screen>
		<para>
			A program 10 darab véletlenszerűen generált normalizált számot köp ki, ahogyan
			azt várjuk is.
		</para>
    </section>
    <section>
        <title>LZW</title>
        <para>
            Valósítsd meg C-ben az LZW algoritmus fa-építését!
        </para>
        <para>
			<emphasis role="strong">Megoldás forrása:</emphasis>
			<link xlink:href="https://github.com/krook1024/textbook/blob/master/files/welch/z3a7.cpp">
				gh/krook1024/textbook/master/files/welch/z3a7.cpp
			</link>
		</para>
		<para>
			A LZWBinFa osztály felépíti a bemeneti fájl bináris fáját. Használata a következőképp
			néz ki: <code>./binfa [bemenő fájl] -o [kimenő fájl]</code>.
		</para>
    </section>
    <section>
        <title>Fabejárás</title>
        <para>
            Járd be az előző (inorder bejárású) fát pre- és posztorder is!
        </para>
        <para>
			<emphasis role="strong">Megoldás forrása (preorder):</emphasis>
		</para>
		<para>
			<emphasis role="strong">Megoldás forrása (postorder):</emphasis>
		</para>
		<para>
			Preorder bejárás esetén [...]
		</para>
		<para>
			Postorder bejárás esetén pedig [...]
		</para>
    </section>
    <section>
        <title>Tag a gyökér</title>
        <para>
            Az LZW algoritmust ültesd át egy C++ osztályba, legyen egy Tree és egy beágyazott Node
            osztálya. A gyökér csomópont legyen kompozícióban a fával!
		</para>
        <para>
			<emphasis role="strong">Megoldás forrása:</emphasis>
			<link xlink:href="https://github.com/krook1024/textbook/blob/master/files/welch/z3a7.cpp">
				gh/krook1024/textbook/master/files/welch/z3a7.cpp
			</link>
		</para>
    </section>
    <section>
        <title>Mutató a gyökér</title>
        <para>
            Írd át az előző forrást, hogy a gyökér csomópont ne kompozícióban, csak aggregációban legyen a
            fával!
		</para>
        <para>
			Megoldás forrása:
			<link xlink:href="https://raw.githubusercontent.com/krook1024/textbook/master/files/welch/mutato-a-gyoker/z3a7.cpp">
				gh/krook1024/textbook/master/files/welch/mutato-a-gyoker/z3a7.cpp
			</link>
		</para>
		<para>
			Ebben a programban úgy írtuk át a már meglévő BinFa
			programunkat, hogy a bináris fánk gyökere mutató legyen.
		</para>
		<para>
			A módosítások elvégzése egyszerű, mechanikus folyamat.
			A gyökér csomópont definíciójánál foglalunk helyet a heapen
			a gyökérnek, majd az ebből kapott mutatót behelyettesítjük az
			olyan helykre, ahol egyébként a gyökér változóra hivatkoztunk.
			Ez a gyakorlatban annyit jelent, hogy eltávolítunk a kódból néhány
			címképző operátort (<emphasis>&amp;</emphasis>).
		</para>
    </section>
    <section>
        <title>Mozgató szemantika</title>
        <para>
			<emphasis role="strong">Megoldás forrása:</emphasis>
			<link xlink:href="https://github.com/krook1024/textbook/blob/master/files/welch/mozgato/z3a8.cpp">
				https://github.com/krook1024/textbook/blob/master/files/welch/mozgato/z3a8.cpp
			</link>
		</para>
		<para>
			A mozgató szemantika alatt másoló-, és mozgató-konstruktorokat és a destruktort
			értjük. A bináris fák másolásához és mozgatásához rekurzív mozgató, és
			másoló függvényekre lesz szükségünk. Lássuk is ezeket.
		</para>
		<programlisting language="C++">
<![CDATA[Csomopont *  masol ( Csomopont * elem, Csomopont * regifa ) {
     Csomopont * ujelem = NULL;
     if ( elem != NULL ) {
         switch (elem->getBetu()) {
			 case '/':
				 ujelem = new Csomopont ( '/' );
				 break;
			 case '0':
				 ujelem = new Csomopont ( '1' );
				 break;
			 case '1':
				 ujelem = new Csomopont ( '0' );
				 break;
			 default:
				 std::cerr<<"HIBA!"<<std::endl;
				 break;
         }
		 ujelem->ujEgyesGyermek(
			 masol(elem->egyesGyermek(), regifa)
		 );
		 ujelem->ujNullasGyermek(
			 masol(elem->nullasGyermek(), regifa)
		 );
         if ( regifa == elem )
              fa = ujelem;
     }
     return ujelem;
}]]>
		</programlisting>
		<para>
			Az LZWBinFa osztályunk úgy épül fel, hogy az <code>LZWBinFa</code>
			osztályon belül megtalálhatóak beágyazott <code>Csomopont</code>
			osztályú objektumok, ezek alkotják a fát.
			Ebből következik, hogy a fát úgy tudjuk másolni, hogy
			ezeket a beágyazott csomópontokat másoljuk, rekurzívan.
		</para>
		<para>
			A fenti kódcsipet a rekurzív másoló függvényünk, amit a másoló
			konstruktorból hívunk meg, olyan módon, hogy átadjuk neki a
			a gyökeret és magát a fát.
		</para>
		<programlisting language="C++">
<![CDATA[LZWBinFa ( const LZWBinFa & regi ) {
	std::cout << "LZWBinFa copy ctor" << std::endl;
	gyoker =  masol ( regi.gyoker, regi.fa ) ;
}]]>
		</programlisting>
	</section>
</chapter>
