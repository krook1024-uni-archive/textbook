<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Welch!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Első osztályom</title>
        <para>
            <emphasis role="strong">Megoldás forrása:</emphasis>
        </para>
		<note>
			<title>Átvett kódcsipet</title>
			<para>
				A következő kódcsipetet Bátfai Norbert készítette!
			</para>
		</note>
        <programlisting language="Java">
            <textobject>
                <textdata fileref="./files/welch/polargen/polargen.java" />
            </textobject>
        </programlisting>
        <para>
            A módosított polártranszformációs generátor argumentum két
            véletlenszerű érték generálása alkalmazható.
            Próbáljuk is ki!
        </para>
        <screen>
<![CDATA[$ /java/bin/java polargen.java
-0.7353431820414118
-0.33784190028284766
0.7750031835316805
0.5524713543467192
-0.5380423283211784
1.512849268596637
2.7148874695500966
-0.23688836801277952
-0.3238588036816322
-0.7963150809415576
$ /java/bin/java polargen.java
-0.6566325405553158
0.40465899229436114
0.08634239512228409
-0.9470321445590416
0.1926238606249351
0.7705517022243931
0.9084531239664848
-1.4472688950554047
-1.6250659297425345
-0.7791586500972545]]>
        </screen>
        <para>
            A program 10 darab véletlenszerűen generált normalizált számot köp ki, ahogyan
            azt várjuk is. Az OO előnye itt látszik meg, hiszen a matematikai háttér
            számunkra úgymond lényegtelen, és ezt az osztály el is rejti a programozó
            szeme elől. A programunk mégis működik.
        </para>
    </section>
    <section>
        <title>LZW</title>
        <para>
            Valósítsd meg C-ben az LZW algoritmus fa-építését!
        </para>
        <para>
            <emphasis role="strong">Megoldás forrása:</emphasis>
            <link xlink:href="https://github.com/krook1024/textbook/blob/master/files/welch/z3a7.cpp">
                gh/krook1024/textbook/master/files/welch/z3a7.cpp
            </link>
        </para>
        <note>
            <title>Átvett kódcsipet</title>
            <para>
                A következő kódcsipetet Bátfai Norbert készítette!
            </para>
        </note>
        <programlisting language="C++"><xi:include href="./files/welch/z3a7.cpp" parse="text" /></programlisting>
        <para>
            A LZWBinFa osztály felépíti a bemeneti fájl bináris fáját. Használata a következőképp
            néz ki: <code>./binfa [bemenő fájl] -o [kimenő fájl]</code>.
        </para>
        <para>
            Egy bináris fát a következőképpen építhetünk fel:
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    amennyiben 0-st kell betenni a fába, úgy megnézzük, hogy
                    az aktuális csomópont tartalmaz e 0-s elemet
                    <itemizedlist>
                        <listitem><para>amennyiben nem tartalmaz, úgy betesszük a nullás gyermekének a 0-t</para></listitem>
                        <listitem><para>amennyiben már tartalmaz, úgy készítünk egy új csomópontot és az ő gyermekeként tesszük be a 0-st</para></listitem>
            </itemizedlist>
            </para>
        </listitem>
        </itemizedlist>
        <para>
            A lépések ugyanezek 1-es betétele esetén is.
        </para>
        <para>
            Tekintsünk meg egy példát is: rajzoljuk fel a 011010 bináris fáját!
        </para>
        <figure>
            <title>A 011010 bináris fája</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="./pictures/binfa.png" />
                </imageobject>
            </mediaobject>
        </figure>
    </section>
    <section>
        <title>Fabejárás</title>
        <caution>
            <title>Tutorált</title>
            <para>
                Ebben a feladatban tutorált Duszka Ákos Attila.
            </para>
        </caution>
        <para>
            <emphasis role="strong">Megoldás forrása:</emphasis>
            <link xlink:href="https://github.com/krook1024/textbook/tree/master/files/welch/fabejaras">
                https://github.com/krook1024/textbook/tree/master/files/welch/fabejaras
            </link>
        </para>
        <para>
            Preorder bejárás esetén a gyökérrel kezdünk, majd bejárjuk a baloldali részfát,
            azt követően pedig a jobboldali részfát.
        </para>
        <para>
            Postorder bejárás esetén pedig szintén a gyökérrel kezdünk, viszont a jobboldali
            részfával folytatjuk, és a baloldali részfával végzünk.
        </para>
        <para>
            Inorder bejárás esetén a bal oldali részfát követően bejárjuk a gyökeret,
            majd a jobboldali részfát.
        </para>
        <para>
            A program futtatása mostmár a következőképpen néz ki:
            <code>./binfa befile -o kifile [o/r]</code> ahol az o postorder,
            az r pedig preorder bejárást jelent. De mindezt a Makefile
            tartalmazza, tehát az olvasó könnyen és egyszerűen kipróbálhatja
            és tanulmányozhatja a programot.
        </para>
        <screen>
<![CDATA[========PREORDER BEJARAS=========
---------------0(5)
------------0(4)
---------------1(5)
---------0(3)
---------------0(5)
------------1(4)
------------------0(6)
---------------1(5)
------------------1(6)
------0(2)
---------------0(5)
------------0(4)
---------1(3)
------------------0(6)
---------------0(5)
------------1(4)
---------------1(5)
---/(1)
---------0(3)
------------1(4)
------1(2)
---------------0(5)
------------0(4)
---------1(3)
------------1(4)
depth = 5
mean = 4.09091
var = 0.700649
========POSTORDER BEJARAS========
------------1(4)
---------1(3)
------------0(4)
---------------0(5)
------1(2)
------------1(4)
---------0(3)
---/(1)
---------------1(5)
------------1(4)
---------------0(5)
------------------0(6)
---------1(3)
------------0(4)
---------------0(5)
------0(2)
------------------1(6)
---------------1(5)
------------------0(6)
------------1(4)
---------------0(5)
---------0(3)
---------------1(5)
------------0(4)
---------------0(5)
depth = 5
mean = 4.09091
var = 0.700649]]>
        </screen>
    </section>
    <section>
        <title>Tag a gyökér</title>
        <para>
            <emphasis role="strong">Megoldás forrása:</emphasis>
            <link xlink:href="https://github.com/krook1024/textbook/blob/master/files/welch/z3a7.cpp">
                gh/krook1024/textbook/master/files/welch/z3a7.cpp
            </link>
        </para>
        <para>
            Ebben az esetben felhasnzáljuk a már megírt LZWBinFa programot, mely
            eleve úgy lett megírva, hogy a gyökér kompozícióban van a fával.
        </para>
    </section>
    <section>
        <title>Mutató a gyökér</title>
        <para>
            <emphasis role="strong">Megoldás forrása:</emphasis>
            <link xlink:href="https://github.com/krook1024/Prog1vedes">
                github.com/krook1024/Prog1vedes
            </link>
        </para>
        <para>
            Ebben a programban úgy írtuk át a már meglévő BinFa
            programunkat, hogy a bináris fánk gyökere mutató legyen.
        </para>
        <para>
            A módosítások elvégzése egyszerű, mechanikus folyamat.
            A gyökér csomópont definíciójánál foglalunk helyet a heapen
            a gyökérnek, majd az ebből kapott mutatót behelyettesítjük az
            olyan helykre, ahol egyébként a gyökér változóra hivatkoztunk.
            Ez a gyakorlatban annyit jelent, hogy eltávolítunk a kódból néhány
            címképző operátort (<emphasis>&amp;</emphasis>).
        </para>
    </section>
    <section>
        <title>Mozgató szemantika</title>
        <caution>
            <title>Tutorált</title>
            <para>
                Ebben a feladatban tutoráltam Rácz Andrást!
            </para>
        </caution>
        <para>
            <emphasis role="strong">Megoldás forrása:</emphasis>
            <link xlink:href="https://github.com/krook1024/textbook/blob/master/files/welch/mozgato/z3a8.cpp">
                https://github.com/krook1024/textbook/blob/master/files/welch/mozgato/z3a8.cpp
            </link>
        </para>
        <para>
            A mozgató szemantika alatt másoló-, és mozgató-konstruktorokat és a
            destruktort értjük. A bináris fák másolásához és mozgatásához
            rekurzív mozgató, és másoló függvényekre lesz szükségünk. Lássuk is
            ezeket.
        </para>
        <para>
            A névből következtetve gondolhatnánk, hogy egy szimpla
            <filename>std::move</filename> függvényhívás adekvát lehet
            számunkra, azonban nem ez a helyzet. Az
            <filename>std::move</filename> jobbérték referenciát csinál
            a bemenetéből, valamint hívja annak mozgatókonstruktorát.
            A mozgatókonstruktorok <filename>C++11</filename> feature.
        </para>
        <para>
            <link
                xlink:href="https://stackoverflow.com/questions/3413470/what-is-stdmove-and-when-should-it-be-used/27026280#27026280">
                Ezt a linket érdemes elolvasni a <filename>std::move</filename>
                függvény kapcsán.
            </link>
        </para>
        <programlisting language="C++">
<![CDATA[Csomopont *  masol ( Csomopont * elem, Csomopont * regifa ) {
     Csomopont * ujelem = NULL;
     if ( elem != NULL ) {
         switch (elem->getBetu()) {
             case '/':
                 ujelem = new Csomopont ( '/' );
                 break;
             case '0':
                 ujelem = new Csomopont ( '1' );
                 break;
             case '1':
                 ujelem = new Csomopont ( '0' );
                 break;
             default:
                 std::cerr << "HIBA!" << std::endl;
                 break;
         }
         ujelem->ujEgyesGyermek(
             masol(elem->egyesGyermek(), regifa)
         );
         ujelem->ujNullasGyermek(
             masol(elem->nullasGyermek(), regifa)
         );
         if ( regifa == elem )
              fa = ujelem;
     }
     return ujelem;
}]]>
        </programlisting>
        <para>
            Az LZWBinFa osztályunk úgy épül fel, hogy az <code>LZWBinFa</code>
            osztályon belül megtalálhatóak beágyazott <code>Csomopont</code>
            osztályú objektumok, ezek alkotják a fát.
            Ebből következik, hogy a fát úgy tudjuk másolni, hogy
            ezeket a beágyazott csomópontokat másoljuk, rekurzívan.
        </para>
        <para>
            A fenti kódcsipet a rekurzív másoló függvényünk, amit a másoló
            konstruktorból hívunk meg, olyan módon, hogy átadjuk neki a
            a gyökeret és magát a fát.
        </para>
        <programlisting language="C++">
<![CDATA[LZWBinFa ( const LZWBinFa & regi ) {
    std::cout << "LZWBinFa copy ctor" << std::endl;
    gyoker =  masol ( regi.gyoker, regi.fa ) ;
}]]>
        </programlisting>
        <para>
            A másolókonstruktort úgy teszteljük, hogy nem referencia szerint
            adjuk át egy egyszerű függvénynek a fánkat, hanem érték szerint,
            ilyenkor a fa másolódik.
            Ha kipróbáljuk a programot akkor láthatjuk,hogy a másolókonstruktorunk működik.
        </para>
        <screen>
<![CDATA[$ make
LZWBinFa copy ctor
------------0(3)
---------0(2)
------0(1)
---/(0)
---------0(2)
------1(1)
depth = 3
mean = 2.5
var = 0.707107
------------1(3)
---------1(2)
------1(1)
---/(0)
---------1(2)
------0(1)
depth = 3
mean = 2.5
var = 0.707107]]>
        </screen>
        <para>
            Ennek alapjára most készítsük el a mozgatókonstruktort is. Ez alatt azt értjük,
            hogy felül fogjuk terhelni a '=' operátort (operator overloading).
        </para>
        <programlisting language="C++">
<![CDATA[LZWBinFa & operator=(LZWBinFa & regi) {
    std::cout << "mozgato ctor" << std::endl;
    this->gyoker = regi.gyoker;
    this->fa = regi.fa;
    return *this;
}]]>
        </programlisting>
        <screen>
<![CDATA[LZWBinFa copy ctor
------------0(3)
---------0(2)
------------1(3)
---------------1(4)
------0(1)
------------0(3)
---------1(2)
---/(0)
---------------0(4)
------------0(3)
---------------1(4)
------------------1(5)
---------0(2)
------------1(3)
---------------1(4)
------1(1)
------------------0(5)
---------------0(4)
------------------1(5)
------------0(3)
---------------1(4)
---------1(2)
---------------0(4)
------------1(3)
---------------1(4)
depth = 5
mean = 4.09091
var = 0.700649
mozgato ctor
------------1(3)
---------1(2)
------------0(3)
---------------0(4)
------1(1)
------------1(3)
---------0(2)
---/(0)
---------------1(4)
------------1(3)
---------------0(4)
------------------0(5)
---------1(2)
------------0(3)
---------------0(4)
------0(1)
------------------1(5)
---------------1(4)
------------------0(5)
------------1(3)
---------------0(4)
---------0(2)
---------------1(4)
------------0(3)
---------------0(4)
depth = 5
mean = 4.09091
var = 0.700649
------------1(3)
---------1(2)
------------0(3)
---------------0(4)
------1(1)
------------1(3)
---------0(2)
---/(0)
---------------1(4)
------------1(3)
---------------0(4)
------------------0(5)
---------1(2)
------------0(3)
---------------0(4)
------0(1)
------------------1(5)
---------------1(4)
------------------0(5)
------------1(3)
---------------0(4)
---------0(2)
---------------1(4)
------------0(3)
---------------0(4)
depth = 5
mean = 4.09091
var = 0.700649]]>
        </screen>
        <para>
            A kimenetünkön megjelenneik mind a "mozgato ctor" és "copy ctor"
            üzenetek, melyeket indikátorokként ültettünk el a forráskódban,
            hogy láthassuk, működnek-e.
        </para>
    </section>
</chapter>
