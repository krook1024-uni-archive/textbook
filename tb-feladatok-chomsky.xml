<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Decimálisból unárisba átváltó Turing gép</title>

		<figure>
			<title>Példa ilyen Turing-gépre</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="./pictures/Turing.png" width="100%" />
				</imageobject>
			</mediaobject>
		</figure>

		<para>
			Ránézésre a téma eléggé száraznak és unalmasnak hangozhat,
			azonban hogyha jobban beleássunk magunkat a témába,
			rájöhetünk, hogy meglehetősen izgalmas tud lenni olykor.
			Programozóként nem szabad megijednünk a Turing-gépektől
			valamint alkalmazásuktól.
		</para>
    </section>

    <section>
        <title>Az a<superscript>n</superscript>b<superscript>n</superscript>c<superscript>n</superscript> nyelv nem környezetfüggetlen</title>
        <para>
            Mutass be legalább két környezetfüggő generatív grammatikát, amely ezt a nyelvet generálja!
		</para>

		<orderedlist numeration="upperroman">
			<listitem>
				<para>
					Legyenek <emphasis>S, X, Y</emphasis> változók.
					Legyen <emphasis>a, b, c</emphasis> konstansok.
				</para>
				<para>
					<emphasis>S -> abc, S->aXbc, Xb -> bX, Xc -> Ybcc, bY -> Yb, Ay > aax, Ay -> aa</emphasis>
				</para>
				<programlisting>
<![CDATA[S
aXbc
abXc (Xc -> Ybcc)
abYbcc]]>
				</programlisting>
			</listitem>

			<listitem>
				<para>
					Legyenek <emphasis>S, X, Y</emphasis> változók.
					Legyen <emphasis>a, b, c</emphasis> konstansok.
				</para>
				<para>
					<emphasis>A -> aAB, A -> aC, CB -> bCc, cB -> Bc, C -> bc</emphasis>
				</para>
			</listitem>
		</orderedlist>

        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>

    <section>
        <title>Hivatkozási nyelv</title>
        <para>
            A <citation>KERNIGHANRITCHIE</citation> könyv C referencia-kézikönyv/Utasítások melléklete alapján definiáld
            BNF-ben a C utasítás fogalmát!
            Majd mutass be olyan kódcsipeteket, amelyek adott szabvánnyal nem fordulnak (például C89), mással (például C99) igen.
		</para>

		<para>
			C-ben az utasítás fogalmát Bachus-Naur formában megadhatjuk	a következőképpen.

			Ezt a következő logika mentén olvassuk;
			Mi az <code>utasítás</code>? <code>címkézett_utasítás</code> VAGY
			<code>összetett_utasítás</code> VAGY stb...

			Ezen logika mentén olvassuk a következő szabálysorozatot! A
			szabályokat érdemes hátulról (visszafelé) olvasni.
		</para>


		<programlisting>
			<![CDATA[
utasítás ::=
	címkézett_utasítás
	| kifejezésutasítás
	| összetett_utasítás
	| kiválasztó_utasítás
	| iterációs_utasítás
	| vezérlésátadó_utasítás

címkézett_utasítás ::=
	azonosító : utasítás
	case állandó_kifejezés : utasítás
	default : utasítás

kifejezésutasítás ::= kifejezés ;

összetett_utasítás ::= { deklarációs_lista  utasítás_lista }

deklarációs_lista ::= deklaráció | deklarációs_lista deklaráció

utasítás_lista ::= utasítás | utasítás_lista utasítás

kiválasztó_utasítás ::=
	if ( kifejezés ) utasítás
	| if ( kifejezés ) utasítás else utasítás
	| switch ( kifejezés ) utasítás

iterációs_utasítás ::=
	while ( kifejezés ) utasítás
	| do utasítás while ( kifejezés ) ;
	| for ( kifejezés ; kifejezés ; kifejezés ) utasítás

vezérlésátadó_utasítás ::=
	goto azonosító;
	| continue ;
	| break ;
	| return kifejezés ;]]>
		</programlisting>

		<para>
			Ugyan ez a nyelvtan nem generálja a teljes C nyelvet, viszont nekünk a
			megértéshez elégséges példát szolgáltat.
		</para>


        <para>
			Előfordul olyan kódcsipet, mely az egyik C verzióval hibátlanul lefordul,
			míg más C verzió fordítója hibát dob rá.
			Nézzünk meg erre egy konkrét példát, ahol a csipetünk C99-el fordul,
			azonban C89-el nem.
		</para>
		<programlisting language="c">
			<textobject>
				<textdata fileref="./files/chomsky/c99.c" />
			</textobject>
		</programlisting>
		<para>
			A fenti csipet talán a leglátványosabb példája ennek. Próbáljuk
			meg lefordítani ezt C89 verzióval.
		</para>
		<programlisting>
<![CDATA[$ gcc -std=c89 c99.c
c99.c: In function ‘main’:
c99.c:4:2: error: ‘for’ loop initial declarations are only allowed in C99 or C11 mode
  for(int i=0; i < 5; i++);
  ^~~
c99.c:4:2: note: use option -std=c99, -std=gnu99, -std=c11 or -std=gnu11 to compile your code]]>
		</programlisting>
		<para>
			Látható hogy a fordító a barátunk, megoldást is kínál a problémánkra.
			Amennyiben az általa javasolt opciókkal fordítunk, semmi probléma nincs.
		</para>
		<programlisting>
<![CDATA[$ gcc -std=c99 c99.c
$]]>
		</programlisting>
    </section>

    <section>
        <title>Saját lexikális elemző</title>
        <para>
            Írj olyan programot, ami számolja a bemenetén megjelenő valós számokat!
            Nem elfogadható olyan megoldás, amely maga olvassa betűnként a bemenetet,
			a feladat lényege, hogy lexert használjunk, azaz óriások vállán álljunk
			és ne kispályázzunk!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:
		</para>

		<programlisting language="c">
			<textobject>
				<textdata fileref="./files/chomsky/lex.l" />
			</textobject>
		</programlisting>

		<para>
			Itt a lex által ránkruházott előnyöknél fogva egyszerűen csak
			megadjuk a definíciót, majd hagyjuk, hogy az óriások, akiknek a vállán
			állunk, dolgozzanak helyettünk.
		</para>
		<para>
			Amit fent látunk, az nem más, mint a lex definíciónk. A programnak
			megmondjuk, hogy mi értelmes, esetünkben ezt a
			<code>[-+]?([0-9]*\.[0-9]+|[0-9]+)</code>
			sor jelenti.
			Természetes nyelven olvasva ezalatt annyit értünk, hogy
			bármely szám nullátol kilencig, bárhányszoros előfordulása érvényes.
			A következő sorban az <code>.|\n {}</code> utasítás alapján minden
			más bemenetet ignorálunk.
		</para>
		<para>
			Kicsit részletesebben a valós szám regex defenícióján:
		</para>

		<itemizedlist>
			<listitem>
				<para><code>[-+]?</code></para>
				<para>'-' vagy '+', egyszer, vagy nullaszor</para>
			</listitem>

			<listitem>
				<para><code>(</code></para>
				<para>Csoport kezdete</para>
			</listitem>

			<listitem>
				<para><code>[0-9]*</code></para>
				<para>Szám nullátol kilencig, bárhányszor (ez a pont előtti rész)</para>
			</listitem>

			<listitem>
				<para><code>\.</code></para>
				<para>Szó szerint vett '.' (pont)</para>
			</listitem>

			<listitem>
				<para><code>[0-9]+</code></para>
				<para>Szám nullátor kilencig, bárhányszor</para>
			</listitem>

			<listitem>
				<para><code>|</code></para>
				<para>Logikai vagy</para>
			</listitem>

			<listitem>
				<para><code>[0-9]+</code></para>
				<para>Szám nullától kilencig, bárhányszor</para>
			</listitem>

			<listitem>
				<para><code>)</code></para>
				<para>Csoport vége</para>
			</listitem>
		</itemizedlist>

		<para>
			Látszódik, hogy a reguláris kifejezésünk felépítése egyszerű. Elsőnek
			keresünk előjelet (negatív vagy pozitív) <emphasis role="strong">ÉS</emphasis>
			keressük az egészrészt valamint a törtrészt <emphasis role="strong">VAGY</emphasis>
			csak egészrészt.
		</para>

		<para>
			Ebből az egyszerűnek tűnő kódból majd a <code>lex</code> farag nekünk
			egy értelmes C kódot, amit lefordítva láthatjuk is, hogy a programunk
			működik.
		</para>

		<programlisting>
<![CDATA[$ lex lex.l
$ gcc lex.yy.c -o lex
$ ./lex
123ad
Valost talaltam: 123
123ad45
Valost talaltam: 123
Valost talaltam: 45
{1}{2}
Valost talaltam: 1
Valost talaltam: 2
3.1415 1.4142
Valost talaltam: 3.1415
Valost talaltam: 1.4142
...
]]>
		</programlisting>
    </section>

    <section>
        <title>l33t.l</title>
        <para>
			Megoldás forrása:
		</para>

		<programlisting>
<![CDATA[$ lex 1337.l  && gcc lex.yy.c && ./a.out
hello, world!
h3ll0, w0rld!
what's up?
wut's up?
this is so cool!
th1s 1s s0 kewl!
what's up mate?
wut's up m8?
hey dude!
h3y d00d!
loveu
10/3u
Using a lexer is fun!
Us1ng 4 l3x3r 1s fun!]]>
		</programlisting>
        <para>
			Fedezzük fel, hogy az óriások vállán állás nagyon jövedelmező.
			Ezt a programot megadtuk a következő egyszerű szabályokkal, hogy
			specifikus bemenetre mit adjon, minden mást pedig írjon le úgy, ahogy kapta.
			Ezzel a módszerrel sokkal egyszerűbb volt a feladatot megoldani,
			mint magunknak olvasni a bemenetet, és keresni benne a kicserélendő
			karakterláncokat.
		</para>

		<programlisting>
<![CDATA[...
%%
"a"		{ printf("4");				}
"c"		{ printf("k");				}
"e"		{ printf("3");				}
"o"		{ printf("0");				}
"i"		{ printf("1");				}
"t"		{ printf("7");				}
"q"		{ printf("kw");				}
"A"		{ printf("/-\\");			}
"B"		{ printf("13");				}
"C"		{ printf("K");				}
"E"		{ printf("3");				}
"I"		{ printf("1");				}
"V"		{ printf("\\/");			}
"bye" 	{ printf("bai");			}
"and" 	{ printf("nd");				}
"dude" 	{ printf("d00d");			}
[...]
.|\n	{ printf("%s", yytext);		}
%%
...]]>
		</programlisting>
    </section>


    <section>
		<title>A források olvasása</title>

        <caution>
            <title>Tutoriált</title>
            <para>
                Ebben a feladatban tutoriáltam Füleky Ladislav-ot.
            </para>
        </caution>

        <para>
            Hogyan olvasod, hogyan értelmezed természetes nyelven az alábbi kódcsipeteket? Például
            <programlisting><![CDATA[if(signal(SIGINT, jelkezelo)==SIG_IGN)
    signal(SIGINT, SIG_IGN);]]></programlisting>
            Ha a SIGINT jel kezelése figyelmen kívül volt hagyva, akkor ezen túl is legyen
            figyelmen kívül hagyva, ha nem volt figyelmen kívül hagyva, akkor a jelkezelo függvény
            kezelje. (Miután a <command>man 7 signal</command> lapon megismertem a SIGINT jelet, a
            <command>man 2 signal</command> lapon pedig a használt rendszerhívást.)
        </para>

        <caution>
            <title>Bugok</title>
            <para>
                Vigyázz, sok csipet kerülendő, mert bugokat visz a kódba! Melyek ezek és miért?
                Ha nem megy ránézésre, elkapja valamelyiket esetleg a splint vagy a frama?
            </para>
        </caution>

        <orderedlist numeration="lowerroman">
            <listitem>
                <programlisting><![CDATA[if(signal(SIGINT, SIG_IGN)!=SIG_IGN)
signal(SIGINT, jelkezelo);]]></programlisting>
				<para>
					Ha a SIGINT jelkezelése nincs ignorálva, akkor innentől fogva
					<code>jelkezelo</code> végezze a jelkezelést.
				</para>
			</listitem>

            <listitem>
				<programlisting><![CDATA[for(i=0; i<5; ++i)]]></programlisting>
				<para>
					Végezzük el ötször, hogy...
				</para>
			</listitem>

            <listitem>
				<programlisting><![CDATA[for(i=0; i<5; i++)]]></programlisting>
				<para>
					Végezzük el ötször, hogy...
				</para>
			</listitem>

            <listitem>
				<programlisting><![CDATA[for(i=0; i<5; tomb[i] = i++)]]></programlisting>
				<para>
					Növeljük meg tomb első öt elemét eggyel.
				</para>
			</listitem>

            <listitem>
				<programlisting><![CDATA[for(i=0; i<n && (*d++ = *s++); ++i)]]></programlisting>
				<para>
					A kód nehezen olvashatósága mellett kétséges a kiértékelődési
					sorrend is.
				</para>
			</listitem>

            <listitem>
				<programlisting><![CDATA[printf("%d %d", f(a, ++a), f(++a, a));]]></programlisting>
				<para>
					Itt az történik, hogy egy printf függvény argumentumában
					próbáljuk inkrementálni a változókat, melyre nem lehetünk
					abban biztosak, hogy milyen sorrendben fognak kiértékelődni.
					Megbizonyosodhatunk róla, hogy a program nem a kívánt eredményt
					fogja visszaadni, hogyha megpróbáljuk lefuttatni.
				</para>
				<programlisting language="c">
					<textobject>
						<textdata fileref="./files/chomsky/hiba_6.c" />
					</textobject>
				</programlisting>
			</listitem>

            <listitem>
                <programlisting><![CDATA[printf("%d %d", f(a), a);]]></programlisting>
			</listitem>

            <listitem>
				<programlisting><![CDATA[printf("%d %d", f(&a), a);]]></programlisting>
				<para>
					Itt is problémába ütközünk, hiszen az f függvény referencia
					szerint kapja meg az a változót, tehát másolás nélkül.
					Ebben az esetben az f függvény közvetlenül tudja módosítani
					az a változót, emiatt megint kétséges a kiértékelődési
					sorrend, valamit a kód is meglehetősen "rossz minőségű".
				</para>
				<programlisting language="c">
					<textobject>
						<textdata fileref="./files/chomsky/hiba_8.c" />
					</textobject>
				</programlisting>
			</listitem>
        </orderedlist>
    </section>

    <section>
        <title>Logikus</title>
        <para>
            Hogyan olvasod természetes nyelven az alábbi Ar nyelvű formulákat?
        </para>
        <programlisting language="tex"><![CDATA[$(\forall x \exists y ((x<y)\wedge(y \text{ prím})))$

$(\forall x \exists y ((x<y)\wedge(y \text{ prím})\wedge(SSy \text{ prím})))$

$(\exists y \forall x (x \text{ prím}) \supset (x<y)) $

$(\exists y \forall x (y<x) \supset \neg (x \text{ prím}))$
]]></programlisting>
		<para>
			A LaTeX-ről annyit kell tudni, hogy ez egy szövegformázó rendszer, amelyet
			matematikusok előszeretettel használnak dokumentumok és prezentációk formázására,
			de jelen van a nyomdákban is. Használata a tanulási fázist követően egyáltalán
			nem megerőltető, véleményem szerint kényelmesebb is mint egy Word dokumentumot szerkesztgetni,
			valamint jóval több testreszabhatóságot rejt, melyek pár leütésre vannak, és az összkép még
			így is sokkal szebb, mint bármelyik konkurenséé.
		</para>

		<para>
			Az egyszerűség kedvéért ezen sorokat betesszük egy logikus.tex fájlba, majd
			lefordítjuk a forrást egy segédprogram használatával, hogy könnyebben olvasható legyen.
		</para>

		<programlisting>
<![CDATA[$ pandoc -t latex logikus.tex -o logikus.pdf]]>
		</programlisting>

		<para>
			Az elkészült dokumentumot alább beágyazva megtalálhatja az olvasó is.
		</para>

		<figure>
			<title>LaTeX forrás lefordítva</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="./files/chomsky/logikus.png" width="60%" />
				</imageobject>
			</mediaobject>
		</figure>

		<para>
			Ezek az elsőrendű logikai kifejezések lefordítva természetes szövegre:
		</para>

		<itemizedlist>
			<listitem>
				<para>
					A prímszámok száma végtelen.
				</para>
			</listitem>
			<listitem>
				<para>
					Végtelen sok ikerprím van.
				</para>
			</listitem>
			<listitem>
				<para>
					A prímszámok száma véges.
				</para>
			</listitem>
			<listitem>
				<para>
					A prímszámok száma véges.
				</para>
			</listitem>

		</itemizedlist>
    </section>

    <section>
        <title>Deklaráció</title>

        <para>
            Vezesd be egy programba (forduljon le) a következőket:
        </para>

        <itemizedlist>
            <listitem>
                <para>egész</para>
            </listitem>
            <listitem>
                <para>egészre mutató mutató</para>
            </listitem>
            <listitem>
                <para>egész referenciája</para>
            </listitem>
            <listitem>
                <para>egészek tömbje</para>
            </listitem>
            <listitem>
                <para>egészek tömbjének referenciája (nem az első elemé)</para>
            </listitem>
            <listitem>
                <para>egészre mutató mutatók tömbje</para>
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvény</para>
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvényre mutató mutató</para>
            </listitem>
            <listitem>
                <para>egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvény</para>
            </listitem>
            <listitem>
                <para>függvénymutató egy egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvényre</para>
            </listitem>
		</itemizedlist>

		<programlisting language="c++">
			<textobject>
				<textdata fileref="./files/chomsky/dek.c" />
			</textobject>
		</programlisting>

       <para>
            Mit vezetnek be a programba a következő nevek?
        </para>

		<programlisting language="c"><![CDATA[int a;]]></programlisting>
		<para>
			egész
		</para>

		<programlisting language="c"><![CDATA[int *b = &a;]]></programlisting>
		<para>
			egészre mutató mutató
		</para>

		<programlisting language="c"><![CDATA[int &r = a;]]></programlisting>
		<para>
			egész referenciája C++ban
		</para>

		<programlisting language="c"><![CDATA[int c[5];]]></programlisting>
		<para>
			egészek tömbje
		</para>

		<programlisting language="c"><![CDATA[int (&tr)[5] = c;]]></programlisting>
		<para>
			egészek tömbjének referenciája
		</para>

		<programlisting language="c"><![CDATA[int *d[5];]]></programlisting>
		<para>
			egészek tömbjére mutató mutató
		</para>

		<programlisting language="c"><![CDATA[int *h ();]]></programlisting>
		<para>
			egészre mutató mutatót visszaadó függvény
		</para>

		<programlisting language="c"><![CDATA[int *(*l) ();]]></programlisting>
		<para>
			egészre mutatóra mutató mutatót visszaadó függvény
		</para>

		<programlisting language="c"><![CDATA[int (*v (int c)) (int a, int b)]]></programlisting>
		<para>
			két egészet kapó, egy egészre mutató mutatót visszaadó függvény
		</para>

		<programlisting language="c"><![CDATA[int (*(*z) (int)) (int, int);]]></programlisting>
		<para>
			két egészet kapó, egy egészet visszaadó függvényre mutató mutató
		</para>
    </section>
</chapter>
