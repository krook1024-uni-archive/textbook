<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Liskov!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Liskov helyettesítés sértése</title>
        <para>
            A Liskov helyettesítési elv megköveteli, hogy minden osztály legyen
            helyettesíthető egy gyermek osztályával anélkül, hogy a program
            helyes működése megváltozna.
        </para>
        <para>
            Ez az elv egyébként része a <emphasis role="strong">S.O.L.I.D</emphasis>
            alapelveknek, melyet Robert C. Martin, a clean code mozgalom atyja
            alkotott meg. Ezek az alapelvek a kód minőségét hivatottak
            javítani. Hogyha szeretnél erről részletesen olvasni, olvasd
            el ezt a posztot:
            <link xlink:href="https://www.refaktor.hu/tiszta-kod-5-resz-a-s-o-l-i-d-alapelvek/">
            ttps://www.refaktor.hu/tiszta-kod-5-resz-a-s-o-l-i-d-alapelvek/
            </link>.
        </para>
        <caution>
            <title>Módosított kódcsipet</title>
            <para>
                Az alábbi kódcsipetet a fenti blogposztból vettem át.
            </para>
        </caution>
        <para>
            Tekintsük ezt a példát, ahol egy blogmotorral dolgozunk és
            a <classname>BlogPost</classname> osztályt kiegészítjük a
            <classname>VideoBlogPost</classname> osztállyal, amely videók
            megjelenítésére hivatott.
        </para>
        <programlisting language="java">
            <textobject>
                <textdata fileref="./files/liskov/BlogPost.java" />
            </textobject>
        </programlisting>
        <para>
            Amint látszik, a <classname>VideoBlogPost</classname> osztály
            <function>getContent()</function> metódusa felülírja a szülőét,
            méghozzá olyan módon, hogy ha a főprogramban az összes
            <classname>BlogPost</classname> példányt kicserélnék
            <classname>VideoBlogPost</classname> példányra, akkor bizony
            problémába ütköznénk.
        </para>
        <para>
            Bár viszonylag kevés blogmotor íródik C++-ban, lássuk
            ebben a nyelvben is ugyanezt a példát.
        </para>
        <programlisting language="c++">
            <textobject>
                <textdata fileref="./files/liskov/LSP.cc" />
            </textobject>
        </programlisting>
    </section>
    <section>
        <title>Szülő-gyerek</title>
        <para>
            Demonstráljuk c++ és java osztálydefiníción keresztül, hogy az
            ősön keresztül csak az ős üzenetei küldhetők!
        </para>
        <para>
            A feladat azt mutatja meg, hogy nem lehetséges a szülőn keresztül
            olyan metódust meghívnunk, amit a gyermek igen, a szülő viszont
            nem definiált.
        </para>
        <programlisting language="c++">
            <textobject>
                <textdata fileref="./files/liskov/ParentChild.cc" />
            </textobject>
        </programlisting>
        <para>
            Amennyiben megpróbáljuk fordítani a fenti C++ kódot,
            a fordító a következő hibával kilép:
        </para>
        <screen><![CDATA[$ g++ ParentChild.cc -o /dev/null
        ParentChild.cc: In function ‘int main(int, char**)’:
ParentChild.cc:23:13: error: ‘class Szulo’ has no member named ‘echo’
   23 |     szulo2->echo("damn, son. where'd u find dis???");
      |             ^~~~]]>
        </screen>
        <para>
            Hasonló a helyzet Javában is:
        </para>
        <programlisting language="java">
            <textobject>
                <textdata fileref="./files/liskov/ParentChild.java" />
            </textobject>
        </programlisting>

        <screen><![CDATA[$ java ParentChild.java
        ParentChild.java:20: error: cannot find symbol        sz2.echo("ballalalalalala");
           ^
  symbol:   method echo(String)
  location: variable sz2 of type Szulo1 error
error: compilation failed]]>
        </screen>
    </section>
    <section>
        <title>Anti OO</title>
        <para>
            A <link
            xlink:href="https://www.davidhbailey.com/dhbpapers/bbp-alg.pdf">BBP
            algoritmussal</link> a Pi hexadecimális kifejtésének a 0.
            pozíciótól számított 10^6, 10^7, 10^8 darab jegyét határozzuk meg
            C, C++, Java és C# nyelveken és vessük össze a futási időket!
        </para>
        <para>
            A korábban tárgyalt BBP algoritmusok lefuttatásával fogjuk
            benchmarkolni a C, C++, Java és C# nyelveket. Az implementációk
            forrásai a következő linkről származnak:
            <link
            xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apas03.html?fbclid=IwAR3u80hqfGIVqCAKbpV-3PqH6P4cnfat7uYvNwa7JxWR44UnelERpb6RLfs#sebesseg">https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apas03.html?fbclid=IwAR3u80hqfGIVqCAKbpV-3PqH6P4cnfat7uYvNwa7JxWR44UnelERpb6RLfs#sebesseg</link>.
        </para>
        <para>
            A forrásokat egy picit átalakítottam, hogy automatizálhatóak
            legyenek a tesztek, azaz hogy ne a forrásokban kelljen a
            <filename>d</filename> változót állítani, hanem parancssori
            argumentumként kapják meg.
        </para>
        <para>
            A teszt eredményei a következőképp alakultak;
        </para>
        <figure>
            <title>PiBBP Benchmark (a kevesebb jobb)</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="./pictures/bbpbench.png" width="100%" />
                </imageobject>
            </mediaobject>
        </figure>
        <para>
            Akit pedig a számok érdekelnek, a következő táblázatot
            tanulmányozza;
        </para>
        <figure>
            <title>PiBBP Benchmark</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="./pictures/bbptable.png" width="100%" />
                </imageobject>
            </mediaobject>
        </figure>
        <para>
            A számok azt mutatják, hogy a C, ami nem objektum orientált
            nyelv, jobban teljesített, mint az objektum orientált nyelvek
            többsége.
        </para>
    </section>
    <section>
        <title>Hello, Android!</title>
        <para>
            Élesszük fel az <link
            xlink:href="https://gitlab.com/nbatfai/smnist/tree/master/forHumans/SMNISTforHumansExp3/app/src/main">SMNIST
            for Humans</link> projektet!
        </para>
        <caution>
            <title>Tutorált</title>
            <para>
                Ebben a feladatban Racs Tamás tutorált!
            </para>
        </caution>
        <para>
            Megoldás forrása:
            <link xlink:href="https://github.com/krook1024/SMNISTforHumans">
            https://github.com/krook1024/SMNISTforHumans</link>
        </para>
        <para>
            Ehhez a feladathoz szükségünk lesz az Android Studióra, ami
            az IntellIJ platformra épülő Android fejlesztői környezet.
            Fontos, hogy amennyiben nem áll rendelkezésünkre Androidos telefon,
            avagy kényelmesebbnek találjuk, ha a programot a számítógépen
            tesztelhetjük, telepítésnél válasszuk ki az emulátor opciót is!
            Ez a varázsló az első indításnál megjelenik.
        </para>
        <figure>
            <title>Android Studio telepítés</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="./pictures/sdkinst.png" width="100%" />
				</imageobject>
			</mediaobject>
		</figure>
        <para>
            A forráskódban hamar megtalálhatjuk a csipeteket, amik
            az alkalmazás színeiért felelnek. Egyrészt a
            <filename>colors.xml</filename> fájlt kell megtalálnunk, ebben
            szerkeszthetjük például a felső sáv színet, majd a
            <filename>SurfaceView.java</filename> fájlban a váltakozó
            háttér színeit állíthatjuk be, ezen túl még például az apróságokat
            is, mint a szegélyek és egyebek.
        </para>
        <para>
            Az én szememnek a <link
            xlink:href="https://www.nordtheme.com/docs/colors-and-palettes">Nord
            színséma</link> nagyon kedvező, ezért én erre a színsémára
            állítottam be az alkalmazást is. Képernyőképek következnek.
        </para>
        <figure>
            <title>SMNISTforHumans</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="./pictures/fh1.png" width="70%" />
                </imageobject>
            </mediaobject>
        </figure>
        <figure>
            <title>SMNISTforHumans váltakozó háttérszín</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="./pictures/fh2.png" width="70%" />
                </imageobject>
            </mediaobject>
        </figure>
    </section>
    <section>
        <title>Ciklomatikus komplexitás</title>
        <para>
            Számoltassuk ki valamelyik programunk ciklomatikus komplexitását!
        </para>
        <para>
            A ciklomatikus komplexitás a forráskódot jellemző tulajdonság, azt
            mondja meg, hogy egy adott programban hány lineárisan független út
            található egy programban. Lefordítva, hogy hány féle képpen mehet a
            vezérlés a program kezdetétől a végéig.
        </para>
        <para>
            Ennek kiszámítását végezhetnénk kézzel, a viszonylag egyszerű
            szabályok mentén, vagy a több tucat kiegészítő segítségével, ami
            minden népszerű IDE-hez létezik.
        </para>
        <para>
            Az IntelliJ IDEA fejlesztői környezetben a
            <filename>Metrics</filename> kiegészítővel számoltam ki az előző
            fejezet <emphasis role="strong"> Homokozó</emphasis> feladatához
            tartozó kód ciklomatikus komplexitását. A végeredmény a
            <filename>v(G)</filename> oszlopban található.
        </para>
        <figure>
            <title>IntelliJ IDEA ciklomatikus komplexitás számoltatás</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="./pictures/ccomplexity.png" width="100%" />
				</imageobject>
			</mediaobject>
		</figure>
    </section>
</chapter>
